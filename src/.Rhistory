attach(crabs)
c.newld = lda(sex~crabs$FL+crabs$RW)
c.newld = lda(sex~FL+RW)
predict(c.newld, data.frame(FL=c(10),RW=c(10)))
partimat(c.newld, method='lda', imageplot=FALSE )
partimat(sex~FL+RW, method='lda', imageplot=FALSE )
points(10,10,col='green',pch=16)
# qd heeft lagere error-rate
table(sex, predict(c.ld)$class)
sum(c.ldAER - diag(diag(c.ldAER)))/sum(c.ldAER)
# qd heeft lagere error-rate
c.ldAER = table(sex, predict(c.ld)$class)
sum(c.ldAER - diag(diag(c.ldAER)))/sum(c.ldAER)
c.ldcv = lda(c.dat, sex, CV=True)
c.ldcv = lda(c.dat, sex, CV=TRUE)
c.qdcv = qda(c.dat, sex, CV=TRUE)
prestige
MASS:prestige
MASS:Prestige
Prestige
MASS::Prestige
library(car)
Prestige
attach(Prestige)
detach(crabs)
attach(Prestige)
names(Prestige)
p.ft = Prestige[2:6]
p.ft
p.ft = Prestige[1:6]
p.ft
p.ft = Prestige[1:5]
p.ft
p.k1 = table(knn(train = p.ft, test = p.ft, cl=p.tar, k=1),p.tar)
p.tar = Prestige$type
p.ft = Prestige[1:5]
p.k1 = table(knn(train = p.ft, test = p.ft, cl=p.tar, k=1),p.tar)
p.tar
p.tar = Prestige$type[!isNa(Prestige$type),]
p.tar = Prestige$type[!isna(Prestige$type),]
p.tar = Prestige$type[!is.na(Prestige$type),]
p.tar = Prestige$type[!is.na(Prestige$type)]
p.tar
p.ft = Prestige[!is.na(Prestige$type),1:5]
p.ft
p.k1 = table(knn(train = p.ft, test = p.ft, cl=p.tar, k=1),p.tar)
p.k1
p.k1 = table(knn(train = p.ft, test = p.ft, cl=p.tar, k=3),p.tar)
p.k1 = table(knn(train = p.ft, test = p.ft, cl=p.tar, k=1),p.tar)
p.k1
p.k3 = table(knn(train = p.ft, test = p.ft, cl=p.tar, k=3),p.tar)
p.k3
p.k3 = knn.cv(train=p.ft ,cl=p.tar ,k=3)
table(p.k3, p.tar)
p.k1 = knn.cv(train=p.ft ,cl=p.tar ,k=1)
table(p.k1, p.tar)
p.k3 = knn.cv(train=p.ft ,cl=p.tar ,k=3)
table(p.k3, p.tar)
p.k5 = knn.cv(train=p.ft ,cl=p.tar ,k=5)
table(p.k5, p.tar)
# cross validation met k=1 is bullshit omdat je per definitie perfect zal classificeren
p.v5 = table(p.k5, p.tar)
sum(p.v5 - diag(diag(p.v5)))/sum(p.v5)
errorRate <- funtion(tb)
{
sum(tb - diag(diag(tb)))/sum(tb)
}
errorRate <- function(tb)
{
sum(tb - diag(diag(tb)))/sum(tb)
}
errorRate(p.v5)
deaths = read.csv(file.path("..","opdracht","deaths.csv"))
#deaths = read.csv(file.path("..","opdracht","deaths.csv"))
deaths = read.csv(file.path("..\\opdracht\\deaths.csv"))
#deaths = read.csv(file.path("..","opdracht","deaths.csv"))
deaths = read.csv(file.path("..\\\\opdracht\\\\deaths.csv"))
#deaths = read.csv(file.path("..","opdracht","deaths.csv"))
deaths = read.csv("..\\\\opdracht\\\\deaths.csv")
#deaths = read.csv(file.path("..","opdracht","deaths.csv"))
deaths = read.csv("..\\opdracht\\deaths.csv")
dirname(sys.frame(1)$ofile)
# loading data
deaths = read.csv("deaths.csv")
setwd("~/GitHub/statistiekProject/src")
# loading data
deaths = read.csv("deaths.csv")
# loading data
deaths = read.csv(file = "deaths.csv", header = TRUE)
# loading data
deaths = read.csv(file = "deaths.csv", header = TRUE, na.strings = "")
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv(file = "deaths.csv", fill = TRUE)
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv(file = "deaths.csv")
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv(file = "deaths.csv", fill = TRUE)
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv(file = "deaths.csv",header = TRUE, fill = TRUE)
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.table(file = "deaths.csv",header = TRUE, sep = ";", fill = TRUE)
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.table(file = "deaths.csv",header = TRUE, sep = ";", fill = TRUE, quote = "")
deaths
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.table(file = "deaths.csv",header = TRUE, sep = ";", quote = "")
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.table(file = "deaths.csv",header = TRUE, sep = ";", fill = TRUE, quote = "")
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv2(file = "deaths.csv",header = TRUE, fill = TRUE, quote = "")
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv2(file = "deaths.csv",header = TRUE, fill = TRUE, quote = "", na.strings = "")
deaths
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv2(file = "deaths.csv",header = TRUE, fill = TRUE)
deaths
deaths[2,37]
is.na( deaths[2,37])
# loading data
# fill = TRUE
#  If TRUE then in case the rows have unequal length, blank fields are implicitly added.
deaths = read.csv2(file = "deaths.csv",header = TRUE)
deaths
# Rescale deaths to percentage of deaths of the country
deaths[7,]
# Rescale deaths to percentage of deaths of the country
deaths[,7]
# Rescale deaths to percentage of deaths of the country
deaths[0,6]
# Rescale deaths to percentage of deaths of the country
deaths[1,6]
# Rescale deaths to percentage of deaths of the country
deaths[,6:]
# Rescale deaths to percentage of deaths of the country
deaths[,6:38]
# Rescale deaths to percentage of deaths of the country
deaths[,6:37]
# Rescale deaths to percentage of deaths of the country
deaths[,6:37] \ deaths[,5]
# Rescale deaths to percentage of deaths of the country
c = deaths[,6:37]
prop.table(c[1,])
prop.table(c[1,]) * deaths[1,5]
prop.table(c[1,],1)
# Rescale deaths to percentage of deaths of the country
c = deaths[1:183,6:37]
# Rescale deaths to percentage of deaths of the country
c = deaths[2:183,6:37]
# Rescale deaths to percentage of deaths of the country
c = deaths[1:183,6:37]
# Rescale deaths to percentage of deaths of the country
c = deaths[,6:37]
c
prop.table(c(50,25,25),1)
prop.table(c(50,25,25))
prop.table(c[1,],1)
prop.table(c[1,])
c[1,]\deaths[1,5]
c[1,] \ deaths[1,5]
deaths[1,5]
c[1,] \\ deaths[1,5]
5\2
c[1,] / deaths[1,5]
prop.table(c[1,])
prop.table(c[1,],1)
prop.table(c,1)
prop.table(as.matrix(c),1)
prop.table(as.matrix(c[1,]),1)
c[1,] / deaths[1,5]
sum(c[1,])
c[1,]
c[1,] / sum(c[1,])
prop.table(as.matrix(c[1,]),1)
prop.table(c[1,],1) * sum(c[1,])
prop.table(as.matrix(c[1,]),1) * sum(c[1,])
sum(prop.table(as.matrix(c[1,]),1))
c = prop.table(as.matrix(c),1)
c
#*
# prop.table rescales the row to proportions, which is exactly as we want. I checked if it did what we want/need with the following code
#prop.table(as.matrix(c[1,]),1)
#c[1,] / sum(c[1,])
#prop.table(as.matrix(c[1,]),1) * sum(c[1,])
#sum(prop.table(as.matrix(c[1,]),1))
#prop.table(c(50,25,25))
#sum(c[1,])
typeof(prop.table(as.matrix(c),1))
c
as.data.frame(as.table(c))
deaths[,6] = c[,1]
# loading data, which is in csv2 format (I checked manually and the data is loaded correctly like this)
deaths = read.csv2(file = "deaths.csv",header = TRUE)
deaths[,6] = c[,1]
deaths[,6:37] = c[,1:32]
c[,32]
c[,33]
c[,31]
deaths
scale(deaths[,6:37])
sum(deaths[,6:37])
for (i in 6:37) {
sum(deaths[,i])
}
sum(deaths[,i])
for (i in 6:37) {
sum(deaths[,i])
}
sum(deaths[,6:37])
for (i in 6:37) {
if (sum(deaths[,i]) != 1)
{
k = FALSE
}
}
k
for (i in 6:37) {
if (sum(deaths[,i]) != 1)
{
k = FALSE
print(i)
print(sum(deaths[,i]))
}
}
for (i in 1:nrow(deaths)) {
if (sum(deaths[i,6:ncol(deaths)]) != 1)
{
k = FALSE
print(i)
print(sum(deaths[,i]))
}
}
print(i)
for (i in 1:nrow(deaths)) {
print(i)
if (sum(deaths[i,6:ncol(deaths)]) != 1)
{
k = FALSE
print(i)
print(sum(deaths[,i]))
}
}
for (i in 1:nrow(deaths)) {
deaths[i,6:ncol(deaths)]
if (sum(deaths[i,6:ncol(deaths)]) != 1)
{
k = FALSE
print(i)
print(sum(deaths[,i]))
}
}
for (i in 1:nrow(deaths)) {
deaths[i,6:37]
if (sum(deaths[i,6:ncol(deaths)]) != 1)
{
k = FALSE
print(i)
print(sum(deaths[,i]))
}
}
for (i in 1:nrow(deaths)) {
if (sum(deaths[i,6:ncol(deaths)]) != 1)
{
k = FALSE
print(i)
print(sum(deaths[i,6:ncol(deaths)]))
}
}
k
for (i in 1:nrow(deaths)) {
if (sum(deaths[i,6:ncol(deaths)]) != 1.0)
{
k = FALSE
print(i)
print(sum(deaths[i,6:ncol(deaths)]))
}
}
k
print(sum(deaths[i,6:ncol(deaths)]))
for (i in 1:nrow(deaths)) {
print(sum(deaths[i,6:ncol(deaths)]))
}
isOne = TRUE
for (i in 1:nrow(deaths)) {
print(sum(deaths[i,6:ncol(deaths)]))
if (abs( sum(deaths[i,6:ncol(deaths)]) - 1) > 0.0001)
{
isOne = FALSE
}
}
isOne
for (i in 1:nrow(deaths)) {
#print(sum(deaths[i,6:ncol(deaths)]))
if (abs( sum(deaths[i,6:ncol(deaths)]) - 1) > 0.0000001)
{
isOne = FALSE
}
}
isOne
# scaled
#* just copy paste everything not scaled
scaledDeaths = deaths
scaledDeaths[,6:37] = scale(deaths[,6:37])
scaledDeaths
deaths
library(cluster)
cl.agnesAv = agnes(deaths)
bannerplot(cl.agnesAv)
# vary the method parameters, we saw 3 different ones in the course book
# average, single and complete are the 3 found in the handbook
# agnes
cl.agnesAv = agnes(deaths, method = "average")
cl.agnesSi = agnes(deaths, method = "single")
cl.agnesCo = agnes(deaths, method = "complete")
# diana
cl.diana = diana(deaths)
# grouping the analysises to iterate over
hierClust = c(cl.agnesAv, cl.agnesSi, cl.agnesCo, cl.diana)
# prepare to combine the plots
par(mfrow=c(ncol(hierClust),2))
ncol(hierClust)
# prepare to combine the plots
par(mfrow=c(length(hierClust),2))
# iterate and plot
for (h in hierClust) {
bannerplot(h)
pltree(h)
}
bannerplot(cl.agnesAv)
par(mfrow=c(1,2))
bannerplot(cl.agnesAv)
pltree(cl.agnesAv)
#### Oefenzitting 5 - Cluster analyse
#install.packages("cluster")
library(cluster)
attach(iris)
summary(iris)
names(iros)
names(iris)
X = iris[,1:4]
X
# not scaled
clustFeatures = deaths[,6:ncol(deaths)]
clustFeatures
sum(clustFeatures[1,])
# vary the method parameters, we saw 3 different ones in the course book
# average, single and complete are the 3 found in the handbook
# agnes
cl.agnesAv = agnes(clustFeatures, method = "average")
cl.agnesSi = agnes(clustFeatures, method = "single")
cl.agnesCo = agnes(clustFeatures, method = "complete")
par(mfrow=c(1,2))
bannerplot(cl.agnesAv)
pltree(cl.agnesAv)
# grouping the analysises to iterate over
hierClust = c(cl.agnesAv, cl.agnesSi, cl.agnesCo, cl.diana)
# iterate and plot
for (h in hierClust) {
bannerplot(h)
pltree(h)
}
hierClust
# prepare to combine the plots
par(mfrow=c(4,2))
bannerplot(cl.agnesAv)
pltree(cl.agnesAv)
bannerplot(cl.agnesSi)
pltree(cl.agnesSi)
bannerplot(cl.agnesCo)
pltree(cl.agnesCo)
bannerplot(cl.diana)
pltree(cl.diana)
bannerplot(cl.agnesAv)
par(mfrow=c(1,1))
bannerplot(cl.agnesAv)
pltree(cl.agnesAv)
bannerplot(cl.agnesAv)
pltree(cl.agnesAv)
bannerplot(cl.agnesSi)
pltree(cl.agnesSi)
bannerplot(cl.agnesCo)
pltree(cl.agnesCo)
bannerplot(cl.diana)
pltree(cl.diana)
dev.off
par(mfrow=c(1,1))
# plot with country codes as labels
bannerplot(cl.agnesAv, labels = deaths[,2])
pltree(cl.agnesAv, labels = deaths[,2])
bannerplot(cl.agnesSi, labels = deaths[,2])
pltree(cl.agnesSi, labels = deaths[,2])
bannerplot(cl.agnesCo, labels = deaths[,2])
pltree(cl.agnesCo, labels = deaths[,2])
bannerplot(cl.diana, labels = deaths[,2])
pltree(cl.diana, labels = deaths[,2])
dev.off
svg(filename="hierachicalClusteringNoScaling.svg",
width=5,
height=5*4,
pointsize=12)
# prepare to combine the plots
par(mfrow=c(4,2))
# plot with country codes as labels
bannerplot(cl.agnesAv, labels = deaths[,2])
pltree(cl.agnesAv, labels = deaths[,2])
bannerplot(cl.agnesSi, labels = deaths[,2])
pltree(cl.agnesSi, labels = deaths[,2])
bannerplot(cl.agnesCo, labels = deaths[,2])
pltree(cl.agnesCo, labels = deaths[,2])
bannerplot(cl.diana, labels = deaths[,2])
pltree(cl.diana, labels = deaths[,2])
dev.off
dev.off()
svg(filename="hierachicalClusteringNoScaling.svg",
width=15,
height=5*4,
pointsize=12)
# prepare to combine the plots
par(mfrow=c(4,2))
# plot with country codes as labels
bannerplot(cl.agnesAv, labels = deaths[,2])
pltree(cl.agnesAv, labels = deaths[,2])
bannerplot(cl.agnesSi, labels = deaths[,2])
pltree(cl.agnesSi, labels = deaths[,2])
bannerplot(cl.agnesCo, labels = deaths[,2])
pltree(cl.agnesCo, labels = deaths[,2])
bannerplot(cl.diana, labels = deaths[,2])
pltree(cl.diana, labels = deaths[,2])
dev.off()
# plotting dendogram and  and saving the plot
#* drawing very wide to be able to read the country codes on the figure
svg(filename="hierachicalClusteringNoScaling.svg",
width=30,
height=5*4,
pointsize=12)
# prepare to combine the plots
par(mfrow=c(4,2))
# plot with country codes as labels
bannerplot(cl.agnesAv, labels = deaths[,2])
pltree(cl.agnesAv, labels = deaths[,2])
bannerplot(cl.agnesSi, labels = deaths[,2])
pltree(cl.agnesSi, labels = deaths[,2])
bannerplot(cl.agnesCo, labels = deaths[,2])
pltree(cl.agnesCo, labels = deaths[,2])
bannerplot(cl.diana, labels = deaths[,2])
pltree(cl.diana, labels = deaths[,2])
dev.off()
par(mfrow=c(1,1))
par(mfrow=c(1,1))
dev.off()
# clustering algorithms
#kmeans
#pam
#fanny
cl.maxIters = 25
cl.nstarts = 50
cl.k4 = kmeans(x = clustFeatures, centers = 4, iter.max = cl.maxIters, nstart = cl.nstarts)
# clustering algorithms
#kmeans
#pam
#fanny
cl.maxIters = 25
cl.nstarts = 50
k1 = 4
k2 = 5
k3 = 10
cl.k4 = kmeans(x = clustFeatures, centers = k1, iter.max = cl.maxIters, nstart = cl.nstarts)
cl.k5 = kmeans(x = clustFeatures, centers = k2, iter.max = cl.maxIters, nstart = cl.nstarts)
cl.k10 = kmeans(x = clustFeatures, centers = k3, iter.max = cl.maxIters, nstart = cl.nstarts)
cl.p4 = pam(x = clustFeatures, k = k1)
cl.p5 = pam(x = clustFeatures, k = k2)
cl.p10 = pam(x = clustFeatures, k = k3)
cl.f4 = fanny(x = clustFeatures, k = k1)
cl.f5 = fanny(x = clustFeatures, k = k2)
cl.f10 = fanny(x = clustFeatures, k = k3)
k1 = 4
k2 = 5
k3 = 10
cl.k1 = kmeans(x = clustFeatures, centers = k1, iter.max = cl.maxIters, nstart = cl.nstarts)
cl.k2 = kmeans(x = clustFeatures, centers = k2, iter.max = cl.maxIters, nstart = cl.nstarts)
cl.k3 = kmeans(x = clustFeatures, centers = k3, iter.max = cl.maxIters, nstart = cl.nstarts)
cl.p1 = pam(x = clustFeatures, k = k1)
cl.p2 = pam(x = clustFeatures, k = k2)
cl.p3 = pam(x = clustFeatures, k = k3)
cl.f1 = fanny(x = clustFeatures, k = k1)
cl.f2 = fanny(x = clustFeatures, k = k2)
cl.f3 = fanny(x = clustFeatures, k = k3)
plot(silhouette(cl.k1))
clusplot(cl.k1)
cl.k1
silhouette(cl.k1)
